arguments: /home/huangzou/projects/facenet-debug/facenet/src/align/align_dataset_mtcnn.py ../../../datasets/lfw/raw ../../../datasets/lfw/lfw_mtcnnpy_160 --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 1.7.0
--------------------
git hash: b'096ed770f163957c1e56efa7feeb194773920f6e'
--------------------
b"diff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex 7d5e735..cf4828a 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -31,7 +31,7 @@ import os\n import argparse\n import tensorflow as tf\n import numpy as np\n-import facenet\n+import facenet.src.facenet as facenet\n import align.detect_face\n import random\n from time import sleep\ndiff --git a/src/validate_on_lfw.py b/src/validate_on_lfw.py\nindex ac456c5..634c01d 100644\n--- a/src/validate_on_lfw.py\n+++ b/src/validate_on_lfw.py\n@@ -40,6 +40,7 @@ from tensorflow.python.ops import data_flow_ops\n from sklearn import metrics\n from scipy.optimize import brentq\n from scipy import interpolate\n+import scipy\n \n def main(args):\n   \n@@ -59,7 +60,7 @@ def main(args):\n             control_placeholder = tf.placeholder(tf.int32, shape=(None,1), name='control')\n             phase_train_placeholder = tf.placeholder(tf.bool, name='phase_train')\n  \n-            nrof_preprocess_threads = 4\n+            nrof_preprocess_threads = 1\n             image_size = (args.image_size, args.image_size)\n             eval_input_queue = data_flow_ops.FIFOQueue(capacity=2000000,\n                                         dtypes=[tf.string, tf.int32, tf.int32],\n@@ -80,11 +81,12 @@ def main(args):\n \n             evaluate(sess, eval_enqueue_op, image_paths_placeholder, labels_placeholder, phase_train_placeholder, batch_size_placeholder, control_placeholder,\n                 embeddings, label_batch, paths, actual_issame, args.lfw_batch_size, args.lfw_nrof_folds, args.distance_metric, args.subtract_mean,\n-                args.use_flipped_images, args.use_fixed_image_standardization)\n+                args.use_flipped_images, args.use_fixed_image_standardization, image_batch)\n+\n+\n \n-              \n def evaluate(sess, enqueue_op, image_paths_placeholder, labels_placeholder, phase_train_placeholder, batch_size_placeholder, control_placeholder,\n-        embeddings, labels, image_paths, actual_issame, batch_size, nrof_folds, distance_metric, subtract_mean, use_flipped_images, use_fixed_image_standardization):\n+        embeddings, labels, image_paths, actual_issame, batch_size, nrof_folds, distance_metric, subtract_mean, use_flipped_images, use_fixed_image_standardization, image_batch):\n     # Run forward pass to calculate embeddings\n     print('Runnning forward pass on LFW images')\n     \n@@ -98,18 +100,22 @@ def evaluate(sess, enqueue_op, image_paths_placeholder, labels_placeholder, phas\n     if use_fixed_image_standardization:\n         control_array += np.ones_like(labels_array)*facenet.FIXED_STANDARDIZATION\n     if use_flipped_images:\n-        # Flip every second image\n+        # Flip every second imagebusgen\n         control_array += (labels_array % 2)*facenet.FLIP\n     sess.run(enqueue_op, {image_paths_placeholder: image_paths_array, labels_placeholder: labels_array, control_placeholder: control_array})\n-    \n+    # image_paths_array  labels_array  control_array  24000*1\n     embedding_size = int(embeddings.get_shape()[1])\n     assert nrof_images % batch_size == 0, 'The number of LFW images must be an integer multiple of the LFW batch size'\n-    nrof_batches = nrof_images // batch_size\n+    nrof_batches = nrof_images // batch_size # 240\n     emb_array = np.zeros((nrof_images, embedding_size))\n     lab_array = np.zeros((nrof_images,))\n     for i in range(nrof_batches):\n         feed_dict = {phase_train_placeholder:False, batch_size_placeholder:batch_size}\n         emb, lab = sess.run([embeddings, labels], feed_dict=feed_dict)\n+        # emb, imgs, lab = sess.run([embeddings, image_batch, labels], feed_dict=feed_dict)\n+        # np.save('imgs.npy', imgs)\n+        # for img,l in zip(imgs, lab):\n+        #     scipy.misc.toimage(img).save('../../datasets/lfw/image_new/images_%d.jpg' % l)\n         lab_array[lab] = lab\n         emb_array[lab, :] = emb\n         if i % 10 == 9:\n@@ -123,7 +129,8 @@ def evaluate(sess, enqueue_op, image_paths_placeholder, labels_placeholder, phas\n         embeddings[:,embedding_size:] = emb_array[1::2,:]\n     else:\n         embeddings = emb_array\n-\n+    np.save('emb_array_org.npy', emb_array)\n+    # embeddings 12000\xef\xbc\x8c 1024     actual_issame is all true    # args.nrof_folds = 10   args.distance_metric=1    args.subtract_mean=True\n     assert np.array_equal(lab_array, np.arange(nrof_images))==True, 'Wrong labels used for evaluation, possibly caused by training examples left in the input pipeline'\n     tpr, fpr, accuracy, val, val_std, far = lfw.evaluate(embeddings, actual_issame, nrof_folds=nrof_folds, distance_metric=distance_metric, subtract_mean=subtract_mean)\n     \n@@ -162,3 +169,16 @@ def parse_arguments(argv):\n \n if __name__ == '__main__':\n     main(parse_arguments(sys.argv[1:]))\n+\n+\n+\n+# ../../datasets/lfw/lfw_mtcnnpy_160\n+# ../models/20180402-114759/20180402-114759.pb\n+# --distance_metric\n+# 1\n+# --use_flipped_images\n+# --subtract_mean\n+# --use_fixed_image_standardization\n+# --lfw_pairs\n+# ../data/pairs.txt\n+"